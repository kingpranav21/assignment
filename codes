Find the smallest window in an array sorting which will make the entire array sorted

Given an integer array, find the smallest window sorting which will make the entire array sorted in increasing order.

For example,

Input:  { 1, 2, 3, 7, 5, 6, 4, 8 }
Output: Sort the array from index 3 to 6
 
 
Input:  { 1, 3, 2, 7, 5, 6, 4, 8 }
Output: Sort the array from index 1 to 6

CODE :
import java.util.*;
public class Main {
    public static void main(String args[]){
        int arr[]={1, 3, 2, 7, 5, 6, 4, 8};
        int i=1;
        int max_idx=0;
        int n=arr.length;
        while(i<n-1){
            if(arr[i]>arr[max_idx]){
                max_idx=i;
                i++;
            }
            else{
                break;
            }
        }
        int start=max_idx;
        int end=-1;
        while(i<n){
            if(arr[i]>arr[max_idx]){
                end=i;
            }
            i++;
        }
        int endd=start+(end-start)-1;
        System.out.print(start+" "+endd);
    }
}




_________________________________________________________________________________________________________________





Find all lexicographic permutations of a string

In this post, we will see how to find all lexicographic permutations of a string where the repetition of characters is allowed.

For example, consider string ABC. It has the following lexicographic permutations with repetition of characters:

AAA AAB AAC ABA ABB ABC ACA ACB ACC BAA BAB BAC BBA BBB BBC BCA BCB BCC CAA CAB CAC CBA CBB CBC CCA CCB CCC


CODE:
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
 
void permutation(string str, string result)
{
    if (result.length() == str.length()){
        cout << result << " ";
        return;
    }
 
    for (unsigned i = 0; i < str.length(); i++) {
        permutation(str, result + str[i]);
    }
}
 
void permutation(string str)
{
    if (str.length() == 0) {
        return;
    }
 
    string result;
     sort(str.begin(), str.end());
 
    permutation(str, result);
}
 
int main()
{
    string str = "ABC";
    permutation(str);
 
    return 0;
}

________________________________________________________________________________________________________







Box Stacking Problem

Given a set of rectangular 3D boxes (cuboids), create a stack of boxes as tall as possible and return the maximum height of the stacked boxes.

A box can be placed on top of another box only if the dimensions of the 2D base of the lower box is each “strictly” larger than of the 2D base of the higher box. Note that “multiple” instances of the same box can be used, such that a box can be rotated to use any of its sides as the base, and the solution does not have to include the every box to achieve maximum height.

Consider the following boxes where each box has dimensions L × W × H:

(4 × 2 × 5)
(3 × 1 × 6)
(3 × 2 × 1)
(6 × 3 × 8)
The valid rotations (length more than the width) of the boxes are:

(4 × 2 × 5), (5 × 4 × 2), (5 × 2 × 4)
(3 × 1 × 6), (6 × 3 × 1), (6 × 1 × 3)
(3 × 2 × 1), (3 × 1 × 2), (2 × 1 × 3)
(6 × 3 × 8), (8 × 6 × 3), (8 × 3 × 6)
The maximum height possible is 22, which can be obtained by arranging the boxes in the following order:

(3 × 1 × 6)
(4 × 2 × 5)
(6 × 3 × 8)
(8 × 6 × 3)
Note that (3 × 2 × 1) box is not included to achieve the maximum height.
